// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.edi.site;

import bw.co.roguesystems.edi.system.EdiSystemEntityRepository;
import org.springframework.stereotype.Repository;

/**
 * @see SiteEntity
 */
@Repository("siteEntityDao")
public class SiteEntityDaoImpl
    extends SiteEntityDaoBase
{
    
    public SiteEntityDaoImpl(
        EdiSystemEntityRepository ediSystemEntityRepository,
        SiteEntityRepository siteEntityRepository
    ) {

        super(
            ediSystemEntityRepository,
            siteEntityRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toSite(
        SiteEntity source,
        Site target)
    {
        // TODO verify behavior of toSite
        super.toSite(source, target);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Site toSite(final SiteEntity entity)
    {
        // TODO verify behavior of toSite
        return super.toSite(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private SiteEntity loadSiteEntityFromSite(Site site)
    {
        // TODO implement loadSiteEntityFromSite
        throw new UnsupportedOperationException("bw.co.roguesystems.edi.site.loadSiteEntityFromSite(Site) not yet implemented.");

        /* A typical implementation looks like this:
        if (site.getId() == null)
        {
            return  SiteEntity.Factory.newInstance();
        }
        else
        {
            return this.load(site.getId());
        }
        */
    }

    /**
     * {@inheritDoc}
     */
    public SiteEntity siteToEntity(Site site)
    {
        // TODO verify behavior of siteToEntity
        SiteEntity entity = this.loadSiteEntityFromSite(site);
        this.siteToEntity(site, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void siteToEntity(
        Site source,
        SiteEntity target,
        boolean copyIfNull)
    {
        // TODO verify behavior of siteToEntity
        super.siteToEntity(source, target, copyIfNull);
    }
}