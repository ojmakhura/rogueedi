// Generated by hibernate/SpringHibernateDaoImpl.vsl in andromda-spring-cartridge on $springUtils.date.
// license-header java merge-point
/**
 * This is only generated once! It will never be overwritten.
 * You can (and have to!) safely modify it by hand.
 */
package bw.co.roguesystems.edi.client;

import bw.co.roguesystems.edi.system.EdiSystem;
import bw.co.roguesystems.edi.system.EdiSystemEntity;
import bw.co.roguesystems.edi.system.EdiSystemEntityRepository;

import java.util.Collection;
import java.util.HashSet;

import org.apache.commons.collections4.CollectionUtils;
import org.springframework.stereotype.Repository;

/**
 * @see EdiClientEntity
 */
@Repository("ediClientEntityDao")
public class EdiClientEntityDaoImpl
    extends EdiClientEntityDaoBase
{
    
    public EdiClientEntityDaoImpl(
        EdiSystemEntityRepository ediSystemEntityRepository,
        EdiClientEntityRepository ediClientEntityRepository
    ) {

        super(
            ediSystemEntityRepository,
            ediClientEntityRepository
        );
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void toEdiClient(
        EdiClientEntity source,
        EdiClient target)
    {
        // TODO verify behavior of toEdiClient
        super.toEdiClient(source, target);

        if(CollectionUtils.isNotEmpty(source.getEdiSystemEntities())) {
            Collection<EdiSystem> systems = new HashSet<>();

            for(EdiSystemEntity sys : source.getEdiSystemEntities()) {
                EdiSystem system = new EdiSystem();

                system.setId(sys.getId());
                system.setCreatedBy(sys.getCreatedBy());
                system.setCreatedDate(sys.getCreatedDate());
                system.setDescription(sys.getDescription());
                system.setName(sys.getName());
                system.setUrl(sys.getUrl());

                systems.add(system);
            }

            target.setEdiSystems(systems);

        }
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public EdiClient toEdiClient(final EdiClientEntity entity)
    {
        // TODO verify behavior of toEdiClient
        return super.toEdiClient(entity);
    }

    /**
     * Retrieves the entity object that is associated with the specified value object
     * from the object store. If no such entity object exists in the object store,
     * a new, blank entity is created
     */
    private EdiClientEntity loadEdiClientEntityFromEdiClient(EdiClient ediClient)
    {
        if (ediClient.getId() == null)
        {
            return  EdiClientEntity.Factory.newInstance();
        }
        else
        {
            return this.load(ediClient.getId());
        }
    }

    /**
     * {@inheritDoc}
     */
    public EdiClientEntity ediClientToEntity(EdiClient ediClient)
    {
        // TODO verify behavior of ediClientToEntity
        EdiClientEntity entity = this.loadEdiClientEntityFromEdiClient(ediClient);
        this.ediClientToEntity(ediClient, entity, true);
        return entity;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public void ediClientToEntity(
        EdiClient source,
        EdiClientEntity target,
        boolean copyIfNull)
    {
        // TODO verify behavior of ediClientToEntity
        super.ediClientToEntity(source, target, copyIfNull);
    }
}